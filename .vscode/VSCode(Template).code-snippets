{
	// Place your JAVA workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"print Line": {
		"scope": "java",
		"prefix": "pl",
		"body": [
			"System.out.println($1);"
		],
		"description": "Print Line Statement"
	},
	"print": {
		"scope": "java",
		"prefix": "print",
		"body": [
			"System.out.print($1);"
		],
		"description": "Print Statement"
	},
	"print 1d array": {
		"scope": "java",
		"prefix": "printoned",
		"body": [
			"for(int ${1:i}=0;$1<${2:arr}.length;$1++){",
			"System.out.print($2[$1]+\" \");",
			"}",
		],
		"description": "Print 1d array Statement"
	},
	"print 2d array": {
		"scope": "java",
		"prefix": "printtwod",
		"body": [
			"for(int ${1:i}=0;$1<${2:arr}.length;$1++){",
			"for(int ${3:j}=0;$3<${2:arr}[0].length;$3++){",
			"System.out.print($2[$1][$3]+\" \");",
			"}System.out.println();",
			"}",
		],
		"description": "Print 2d array Statement"
	},
	"File Reader": {
		"scope": "java",
		"prefix": "filereader",
		"body": [
			"BufferedReader br=new BufferedReader(new ${1|FileReader(\"input.txt\"),InputStreamReader(System.in)|});"
		],
		"description": "File Reader Statement"
	},
	"Read Variable String": {
		"scope": "java",
		"prefix": "read",
		"body": [
			"${1:s}=br.readLine();",
		],
		"description": "String Read Statement"
	},
	"Read Variable Int": {
		"scope": "java",
		"prefix": "read-int",
		"body": [
			"int ${2:n}=Integer.parseInt(br.readLine());"
		],
		"description": "Int Read Statement"
	},
	"Split Scanned Values": {
		"scope": "java",
		"prefix": "splitvalues",
		"body": [
				"${1:s}=br.readLine();",
                "String ${2:arr}[]=$1.split(\" \");",
                "int ${3:arr1}[] = new int[$2.length];",
                "for(int i=0;i<$2.length;i++){",
                "$3[i]=Integer.parseInt($2[i]);",
                "}"
		],
		"description": "Array Read Statement"
	},
	"Scanner": {
		"scope": "java",
		"prefix": "sc",
		"body": [
			"Scanner sc=new Scanner(System.in);"
		],
		"description": "Scanner"
	},
	"While Test Cases": {
		"scope": "java",
		"prefix": "whiletest",
		"body": [
			"int ${1:t}=Integer.parseInt(br.readLine());",
			"while($1--!=0){",
			"    $3",
			"}",
		],
		"description": "For Decrement Loop"
	},
	"forid": {
		"scope": "java",
		"prefix": "forid",
		"body": [
			"for(${1|int,char,String|} ${2|i,j,k,l|}=${3:arr}.length;$2>0;$2--){$4}"
		],
		"description": "For Decrement Loop"
	},
	"forii": {
		"scope": "java",
		"prefix": "forii",
		"body": [
			"for(${1|int,char,String|} ${2|i,j,k,l|}=0;$2<${3:arr}.length;$2++){$4}"
		],
		"description": "For Increment Loop",
	},
	"util": {
		"scope": "java",
		"prefix": "util",
		"body": [
			"import java.util.*;"
		],
		"description": "import util Statement"
	},
	"readers": {
		"scope": "java",
		"prefix": "readers",
		"body": [
			"import java.io.*;"
		],
		"description": "import readers Statement"
	},
	"ifhasint": {
		"scope": "java",
		"prefix": "ifhasint",
		"body": [
			"if(sc.hasNextInt()) $1=sc.nextInt();"
		],
		"description": "hasNextInt()"
	},
	"ifhaslong": {
		"scope": "java",
		"prefix": "ifhaslong",
		"body": [
			"if(sc.hasNextLong()) $1=sc.nextLong();"
		],
		"description": "hasNextLong()"
	},
	"ifhasnext": {
		"scope": "java",
		"prefix": "ifhasnext",
		"body": [
			"if(sc.hasNext()) $1=sc.next();"
		],
		"description": "hasNext()"
	},
	"ifhasnextline": {
		"scope": "java",
		"prefix": "ifhasnexline",
		"body": [
			"if(sc.hasNextLine()) $1=sc.nextLine();"
		],
		"description": "hasNextLine()"
	},
	"Array1d": {
		"scope": "java",
		"prefix": "oned",
		"body": [
			"${1|int,String,char,float,double|} ${2:arr}[] = new $1[$3];"
		],
		"description": "hasNextInt()"
	},
	"ArrayList 2d": {
		"scope": "java",
		"prefix": "a-list-two-d",
		"body": [
			"ArrayList<ArrayList<${1:Integer}>> ${2:list} = new ArrayList<ArrayList<$1>>();"
		],
		"description": "hasNextInt()"
	},
	"ArrayList 1d": {
		"scope": "java",
		"prefix": "a-list-one-d",
		"body": [
			"ArrayList<${1:Integer}> ${2:list} = new ArrayList<$1>();"
		],
		"description": "hasNextInt()"
	},
	"Array2d": {
		"scope": "java",
		"prefix": "twod",
		"body": [
			"${1|int,String,char,float,double|} ${2:arr}[][] = new $1[$3][$4];"
		],
		"description": "hasNextInt()"
	},
	"LinkedList": {
		"scope": "java",
		"prefix": "ll",
		"body": [
			"LinkedList<${1|Integer,Long,String,Character,Float,Double|}> ${2:list}=new LinkedList<$1>();"
		],
		"description": "Linked List"
	},
	"Scan LinkedList": {
		"scope": "java",
		"prefix": "scll",
		"body": [
			"for(int ${1:i}=0;$1<${2:n};$1++){${3:list}.add(sc.hasNext${4:Int}()?sc.next$4():0);}"
		],
		"description": "Scan 1D Array"
	},
	"Scan Array 1D": {
		"scope": "java",
		"prefix": "sconed",
		"body": [
			"for(int ${1:i}=0;$1<${2:arr}.length;$2[$1++]=sc.hasNext${3:Int}()?sc.next${3:Int}():0);"
		],
		"description": "Scan 1D Array"
	},
	"Scan Array 2D": {
		"scope": "java",
		"prefix": "sctwod",
		"body": [
			"for(int ${1:i}=0;$1<${2:arr}.length;$1++)",
			"for(int ${3:j}=0;$3<${2:arr}[0].length;$2[$1][$3++]=sc.hasNext${3:Int}()?sc.next${3:Int}():0);"
		],
		"description": "Scan 2D Array"
	},
	
}